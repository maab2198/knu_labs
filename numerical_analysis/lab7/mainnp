import math
import numpy as np
import bisect
from pylab import *
import matplotlib.pyplot as plt

n=10
a=1
b=10
segment=[a,b]
h = abs((b - a) /n)

if(n%2==0):N=n
else: N = 2*n

def func(x):
    return sin(x)

def get_x(b,a):
    average = float((b - a) / N)
    x = [a]
    for i in range(1, N + 1):
        x.append(round(a + average * i, 5))
    return x

def nodes():
    res = np.zeros(n)
    res[0]=segment[0]
    h=(segment[1]-segment[0])/(n-1)
    for i in range(1,n-1):
        res[i] = segment[0] + h*i
    res[n-1] = segment[1]
    return res


def print_plot():

    x = np.arange(segment[0],segment[1], 0.01)
    y_spec=func(x)
    y1=sympson_method(x,0)

    plt.plot(x, y_spec, 'g-', label='f(x)')
    plt.plot(x, y1, 'r-', label='S(x)')
    plt.plot(x, trap(x), 'g-', label='T(x)')
    plt.plot(x, rect_method(x), 'r-', label='R(x)')
    plt.xlabel("x")
    plt.ylabel("y")

    plt.grid(True)
    plt.axis("equal")
    plt.legend()
    plt.show()



def sympson_method(vect,a):
    result=[]
    for b in vect:
        if(n%2==0): N=n
        else: N=2*n
        x=list()
        x=get_x(b,a)
        y_spec=list()
        for i in range(N+1):
            y_spec.append(round(func(x[i]),5))
        res=y_spec[0]+y_spec[N]
        for i in range(1,N):
            if(i%2==0):
                res+=2*y_spec[i]
            else: res+=4*y_spec[i]
        result.append(res*h/3)
    return result

def rect_method(vect):
    result=[]
    y_spec=list()
    res=0
    for b in vect:
        x=list()
        x=get_x(b,a)
        y_spec=list()
        for i in range(N):
            y_spec.append(round(func(b+h/2),5))
        for i in range(N):
            res+=y_spec[i]
        result.append(res*h)
    return result

def trap(vect):
    result=[]
    y_trap=list()
    res=0
    for k in vect:
        x=list()
        x=get_x(b,a)
        for i in range(n+1):
            y_trap.append(round(func(x[i]),5))
        res=(y_trap[0]+y_trap[n])/2
        for i in range(1,n):
            res+=y_trap[i]
        result.append(res*h)
    return result


def main():
    print_plot()


if __name__ == "__main__":
    main()
